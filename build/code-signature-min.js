#!/usr/bin/env -S bun run
// @eip191signature 0xf3d09727a27e3f77a7769de02ed183c536d06ea1f5f216a9cf88b1b2e682d21652ba824980633b6f250b1f9faeef9dff6b3d7268f334cfca9f2c77b059039aca1b
// @sha256sum 0xe212b3b62d85bbcacfc09c2db4e9b375f8df9832abb150cacaf5ecac3c57f654
import{sha256} from"viem";import{english,generateMnemonic,mnemonicToAccount} from"viem/accounts";async function run(){const filePath=process.argv[2]??process.argv[1];const content=await Bun.file(filePath).text();const keys=["eip191signature","sha256sum"];const contentOrig=keys.reduce((acc,k)=>acc.replace(new RegExp(`// @${k} \\S+\n`),""),content);let mnemonic=process.env.MNEMONIC;if(!mnemonic){mnemonic=generateMnemonic(english,256);console.log(mnemonic)}const signature=await mnemonicToAccount(mnemonic).signMessage({message:contentOrig});let updatedContent=content.replace(new RegExp(`// @${keys[0]} \\S+`),`// @${keys[0]} ${signature}`);let updatedData={eip191signature:signature,sha256sum:sha256(new TextEncoder().encode(updatedContent.replace(new RegExp(`// @${keys[1]} \\S+\n`),"")))};updatedContent=updatedContent.replace(new RegExp(`// @${keys[1]} \\S+`),`// @${keys[1]} ${updatedData.sha256sum}`);const match=content.match(new RegExp(`@(${keys.join("|")}) (\\S+)`,"g"));if(match){const data=Object.fromEntries(match.splice(0,2).map((item)=>item.slice(1).split(" ")));const success=keys.reduce((acc,k)=>{if(data[k]!==updatedData[k]){console.log(`// @${k} ${updatedData[k]}`);acc=false}return acc},true);if(success){console.log("OK");return}await Bun.write(filePath,updatedContent)}}import.meta.main&&run().then();export{run}
